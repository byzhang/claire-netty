// Copyright (c) 2013 The claire-netty Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include <claire/netty/http/HttpServer.h>

#include <boost/bind.hpp>
#include <boost/make_shared.hpp>

#include <claire/netty/http/HttpRequest.h>
#include <claire/netty/http/HttpResponse.h>
#include <claire/netty/http/MimeType.h>
#include <claire/netty/http/HttpAssets.h>
#include <claire/common/logging/Logging.h>
#include <claire/common/files/FileUtil.h>

namespace claire {

namespace {

const char kFaviconArray[] = {
0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x68, 0x04, 0x00, 0x00, 0x16, 0x00,
0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x04, 0x00, 0x02, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x05, 0x07, 0x14, 0x7f,
0x00, 0x50, 0x08, 0x7f, 0x17, 0x00, 0x1b, 0x7f, 0x15, 0x48,
0x4a, 0x7f, 0x45, 0x4d, 0x49, 0x7f, 0x1e, 0x67, 0x37, 0x7f,
0x1d, 0x20, 0x2c, 0x7f, 0x24, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x04, 0x00, 0x12, 0x7f,
0x00, 0x75, 0x3f, 0x7f, 0x56, 0x71, 0x04, 0x7f, 0x68, 0x7f,
0x57, 0x7f, 0x7f, 0x7f, 0x3f, 0x7f, 0x7f, 0x7f, 0x30, 0x7f,
0x7f, 0x7f, 0x79, 0x7f, 0x7f, 0x69, 0x75, 0x7f, 0x5c, 0x2a,
0x08, 0x7f, 0x12, 0x00, 0x0a, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x7f, 0x01, 0x00, 0x01, 0x7f,
0x00, 0x43, 0x22, 0x7f, 0x62, 0x6f, 0x18, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x7e, 0x30, 0x57, 0x7f, 0x25, 0x39, 0x06, 0x7f,
0x45, 0x31, 0x08, 0x7f, 0x3c, 0x66, 0x51, 0x7f, 0x7f, 0x7f,
0x75, 0x7f, 0x7f, 0x59, 0x7f, 0x7f, 0x7e, 0x07, 0x74, 0x7f,
0x01, 0x00, 0x02, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x0b, 0x19, 0x1f, 0x7f, 0x67, 0x7f,
0x66, 0x7f, 0x30, 0x61, 0x7e, 0x7f, 0x00, 0x06, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x01, 0x00,
0x00, 0x7f, 0x57, 0x47, 0x68, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
0x4f, 0x60, 0x6c, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x19, 0x00, 0x7f, 0x73, 0x65,
0x60, 0x7f, 0x7f, 0x7f, 0x51, 0x7f, 0x26, 0x50, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f, 0x05, 0x08,
0x07, 0x7f, 0x00, 0x01, 0x01, 0x7f, 0x5e, 0x00, 0x30, 0x7f,
0x63, 0x5f, 0x5f, 0x7f, 0x10, 0x4e, 0x49, 0x7f, 0x03, 0x04,
0x19, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x7f, 0x13, 0x2c,
0x00, 0x7f, 0x53, 0x78, 0x7f, 0x7f, 0x7f, 0x7f, 0x2b, 0x7f,
0x57, 0x53, 0x00, 0x7f, 0x00, 0x00, 0x03, 0x7f, 0x0c, 0x0d,
0x0f, 0x7f, 0x0e, 0x0f, 0x0f, 0x7f, 0x04, 0x05, 0x04, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x7f, 0x09, 0x00,
0x10, 0x7f, 0x02, 0x03, 0x11, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x7f, 0x33, 0x31, 0x02, 0x7f, 0x7b, 0x7f, 0x1e, 0x7f,
0x7f, 0x7e, 0x42, 0x7f, 0x5d, 0x3b, 0x00, 0x7f, 0x00, 0x00,
0x01, 0x7f, 0x14, 0x14, 0x16, 0x7f, 0x12, 0x12, 0x12, 0x7f,
0x00, 0x01, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x08, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x7f, 0x0c, 0x00, 0x00, 0x7f,
0x68, 0x2e, 0x04, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7b, 0x11,
0x0f, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x07, 0x0c, 0x08, 0x7f,
0x0a, 0x0b, 0x09, 0x7f, 0x00, 0x01, 0x00, 0x7f, 0x41, 0x0b,
0x5f, 0x7f, 0x57, 0x2d, 0x64, 0x7f, 0x16, 0x18, 0x75, 0x7f,
0x02, 0x02, 0x0b, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x7f,
0x24, 0x19, 0x2b, 0x7f, 0x7f, 0x45, 0x67, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x65, 0x72, 0x1f, 0x7f, 0x21, 0x00, 0x0a, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x09, 0x00,
0x2d, 0x7f, 0x7e, 0x53, 0x60, 0x7f, 0x72, 0x6e, 0x7f, 0x7f,
0x61, 0x64, 0x74, 0x7f, 0x02, 0x02, 0x15, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72,
0x01, 0x00, 0x00, 0x7f, 0x56, 0x15, 0x2a, 0x7f, 0x13, 0x07,
0x4f, 0x7f, 0x7f, 0x36, 0x6f, 0x7f, 0x7f, 0x7c, 0x7f, 0x7f,
0x7f, 0x5f, 0x62, 0x7f, 0x7a, 0x16, 0x0c, 0x7f, 0x2d, 0x15,
0x59, 0x7f, 0x47, 0x36, 0x32, 0x7f, 0x77, 0x77, 0x7f, 0x7f,
0x7f, 0x7f, 0x7f, 0x7f, 0x2c, 0x2b, 0x06, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x18, 0x2c, 0x21, 0x7f,
0x79, 0x2e, 0x7f, 0x7f, 0x7f, 0x60, 0x7f, 0x7f, 0x7f, 0x5f,
0x7f, 0x7f, 0x78, 0x69, 0x7f, 0x7f, 0x7d, 0x7f, 0x7f, 0x7f,
0x7f, 0x7f, 0x7f, 0x7f, 0x59, 0x59, 0x50, 0x7f, 0x00, 0x00,
0x01, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x04, 0x00, 0x11, 0x7f, 0x2c, 0x00, 0x74, 0x7f, 0x45, 0x3f,
0x55, 0x7f, 0x77, 0x0c, 0x6a, 0x7f, 0x69, 0x70, 0x6b, 0x7f,
0x75, 0x75, 0x71, 0x7f, 0x3c, 0x3b, 0x33, 0x7f, 0x00, 0x00,
0x1e, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x0d, 0x7f, 0x00, 0x00, 0x14, 0x7f,
0x00, 0x00, 0x25, 0x7f, 0x00, 0x00, 0x1a, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f,
0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
0x00, 0x7f, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72,
0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00,
0x00, 0x72, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

} // namespace

HttpServer::HttpServer(EventLoop* loop__,
                       const InetAddress& listen_address,
                       const std::string& name)
    : server_(loop__, listen_address, name)
{
    server_.set_connection_callback(
        boost::bind(&HttpServer::OnConnection, this, _1));
    server_.set_message_callback(
        boost::bind(&HttpServer::OnMessage, this, _1, _2));

    RegisterAsset("/static/jquery-1.10.2.min.js",
                  ASSET_jquery_1_10_2_min_js,
                  ASSET_jquery_1_10_2_min_js_length);
    RegisterAsset("/static/jquery-1.10.3.ui.min.js",
                  ASSET_jquery_1_10_3_ui_min_js,
                  ASSET_jquery_1_10_3_ui_min_js_length);
    RegisterAsset("/static/jquery.json-2.4.min.js",
                  ASSET_jquery_json_2_4_min_js,
                  ASSET_jquery_json_2_4_min_js_length);
    RegisterAsset("/static/bootstrap-2.2.1.min.js",
                  ASSET_bootstrap_2_2_1_min_js,
                  ASSET_bootstrap_2_2_1_min_js_length);
    RegisterAsset("/static/bootstrap-2.2.1.combined.min.css",
                  ASSET_bootstrap_2_2_1_combined_min_css,
                  ASSET_bootstrap_2_2_1_combined_min_css_length);
}

void HttpServer::Start()
{
    if (assets_.find("/favicon.ico") == assets_.end())
    {
        RegisterAsset("/favicon.ico", kFaviconArray, sizeof (kFaviconArray));
    }

    if (assets_.find("/") == assets_.end() || request_callbacks_.find("/") == request_callbacks_.end())
    {
        Register("/",
                 boost::bind(&HttpServer::OnIndexPage, this, _1),
                 true);
    }

    LOG(INFO) << "HttpServer[" << server_.name()
              << "] starts listenning on " << server_.hostport();

    server_.Start();
}

void HttpServer::OnConnection(const TcpConnectionPtr& connection)
{
    LOG(INFO) << "HttpServer[" << server_.name()
              << "] connection " << connection->id() << " "
              << (connection->connected() ? "UP" : "DOWN");

    if (connection->connected())
    {
        HttpConnectionPtr http_connection(new HttpConnection(connection));
        {
            MutexLock lock(mutex_);
            connections_.insert(std::make_pair(connection->id(), http_connection));
            assert(http_connection);
        }

        if (headers_callback_)
        {
            http_connection->set_headers_callback(headers_callback_);
        }

        if (connection_callback_)
        {
            connection_callback_(http_connection);
        }
    }
    else
    {
        HttpConnectionPtr http_connection;
        {
            MutexLock lock(mutex_);
            if (connections_.find(connection->id()) != connections_.end())
            {
                http_connection = connections_[connection->id()];
            }
        }

        if (!http_connection)
        {
            return ;
        }

        if (connection_callback_)
        {
            DCHECK(connections_[connection->id()]);
            connection_callback_(connections_[connection->id()]);
        }

        {
            MutexLock lock(mutex_);
            connections_.erase(connection->id());
        }
    }
}

void HttpServer::OnMessage(const TcpConnectionPtr& connection, Buffer* buffer)
{

    auto it = connections_.find(connection->id());
    if (it == connections_.end())
    {
        connection->Shutdown();
        return ;
    }
    const auto& context = it->second;
    if (!context->Parse<HttpRequest>(buffer))
    {
        LOG(INFO) << "Parse HttpRequest failed, " << connection->id();
        connection->Shutdown();
        return ;
    }

    if (context->GotAll())
    {
        const auto& callbackI = request_callbacks_.find(context->mutable_request()->uri().path());
        if (callbackI != request_callbacks_.end())
        {
            callbackI->second(context);
            context->Reset();
        }
        else
        {
            LOG(ERROR) << "can not find path " << context->mutable_request()->uri().path() << " handler";
            context->Shutdown();
        }
    }

    return ;
}

void HttpServer::RegisterAsset(const std::string& path,
                               const char* data,
                               size_t length)
{
    Register(path, boost::bind(&HttpServer::OnAsset, this, _1), true);
    assets_.insert(std::make_pair(path, StringPiece(data, length)));
}

void HttpServer::OnAsset(const HttpConnectionPtr& connection)
{
    HttpResponse response;
    auto path = connection->mutable_request()->uri().path();

    auto it = assets_.find(path);
    if (it == assets_.end())
    {
        connection->Shutdown();
        return ;
    }

    response.set_status(HttpResponse::k200OK);
    auto pos = path.rfind(".");
    response.AddHeader("Content-Type",
                       MimeType::ExtensionToMimeType(path.substr(pos + 1, path.size())).get_subtype());
    response.AddHeader("Cache-Control", "max-age=60");
    response.mutable_body()->append(it->second.data(), it->second.size());
    connection->Send(&response);
}

void HttpServer::OnIndexPage(const HttpConnectionPtr& connection)
{
    std::string body;
    body.append("<html>\n");

    for (auto it = show_paths_.begin(); it != show_paths_.end(); ++it)
    {
        if (*it == "/")
        {
            continue;
        }

        if ((*it).find("/admin/static/") != std::string::npos)
        {
            continue;
        }

        if ((*it).find(".ico") != std::string::npos)
        {
            continue;
        }

        body.append("<a href=" + *it + " >" + *it  + " </a><br />");
    }
    body.append("</html>");

    HttpResponse response;
    response.mutable_body()->swap(body);
    connection->Send(&response);
}

} // namespace claire
